#include <stdio.h>
#include <stdlib.h>
#define MAX_HEAP_NODE 200

void error(){
	exit(1);
}

typedef int HNode;
#define Key(n) (n)

HNode heap[MAX_HEAP_NODE];
int heap_size;

//부모 노드
#define parent(i) (heap[i/2])
//왼쪽 자식 노드
#define left(i) (heap[i*2])
//오른쪽 자식 노드
#define right(i) (heap[i*2 + 1])

void init_heap() { heap_size = 0; }
int is_empty_heap() { return heap_size == 0; }
int is_full_heap() { return heap_size == MAX_HEAP_NODE - 1 ;}
HNode find_heap() { return heap[1]; }

//10.2
void insert_heap(HNode n)
{
	int i ;
	if ( is_full_heap() ) return;
	i = ++(heap_size);
	while( i != 1 &&  Key(n) > Key( parent(i) ) )
	{
		heap[i] = parent(i);
		i /= 2;
	}
	heap[i] = n;
}

//10.3
HNode delete_heap()
{
	HNode hroot, last;
	int parent = 1, child = 2;

	if( is_empty_heap() )
		error();

	hroot = heap[1];
	last = heap[heap_size--];
	while(child <= heap_size)
	{
		//더 큰 자식을 찾고 child = 더 큰 자식의 인덱스 값을 가짐.
		if( child < heap_size && Key( left( parent ) ) < Key ( right ( parent ) ) )
			child++;
		if( Key( last ) >= Key( heap[child] ) )
			break;
		heap[parent] = heap[child];
		parent = child;
		child *= 2;
	}
	heap[parent] = last;
	return hroot;
}

//10.5
void print_array(int a[], int n, const char* msg)
{
	int i;
	printf("%10s: ", msg);
	for ( i = 0; i < n; i++)
		printf("%3d", a[i]);
	printf("\n");
}

void main()
{
	int i, data[10];

	for( i = 0; i < 10; i++)
		data[i] = rand() % 100;

	print_array(data, 10, "정렬 전");
	init_heap();

	for( i = 0; i < 10; i++)
		insert_heap(data[i]);

	for( i = 9; i >= 0; i--)
		data[i] = Key( delete_heap() );
	// delte_heap == pop()

	print_array(data, 10, "정렬 후");
	
}